#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#Yusen Wu 2000013137
# Describe how and why you modified the baseline code.
#I divide the copy process into two parts:first we copy the ten-times main part.In this stage,I use 10 registers to store ten numbers from %rdi,and use grade-ten cycle-unrolling to load them to 
# %rsi almost at a time(under the prediction to take the optimistic branch).This part is simple just like that in textbook.
# next I check whether left length is greater than 10,if yes continue loop ,else begin the remainders processing procedure.Ihis part I use a three-branches tree(not necessarily balanced) to deal with 
# jump table(to decide the entrance) .Finally add different entrances for different remainder numbers (the 0 to 9 dealt can be used secondly in most cases).(iaddq a negative number and andq itself can # play a "cmp"function)
# The final result in local machine shows below:
# Average CPE:7.50(aha,just in command)
# Total code length:998  (not easy hhhh)
# Correctness:68/68(under -p cmd)
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-10,%rdx        #len >10? if false jump to left procedure
        jl root
loop1:  
        mrmovq (%rdi),%r8      #first read 10 data items into registers for later use at a time to reduce time
        mrmovq 8(%rdi),%r9
        mrmovq 16(%rdi),%r10
        mrmovq 24(%rdi),%r11
        mrmovq 32(%rdi),%r12
        mrmovq 40(%rdi),%r13
        mrmovq 48(%rdi),%r14
        mrmovq 56(%rdi),%rcx
        mrmovq 64(%rdi),%rbp
        mrmovq 72(%rdi),%rbx
        rmmovq %r8,(%rsi)
        andq %r8,%r8           #judge whether >0 ,if true add to count,if  not jump away to next stage
        jle loop2
        iaddq $1,%rax          #count++
loop2:
         
        rmmovq %r9,8(%rsi)
        andq %r9,%r9           #judge whether >0
        jle loop3
        iaddq $1,%rax          #count++
loop3:  
         
        rmmovq %r10,16(%rsi)
        andq %r10,%r10         #judge whether >0
        jle loop4
        iaddq $1,%rax          #count++
loop4:
        
        rmmovq %r11,24(%rsi)
        andq %r11,%r11         #judge whether >0
        jle loop5
        iaddq $1,%rax          #count++
loop5:  
         
        rmmovq %r12,32(%rsi)
        andq %r12,%r12         #judge whether >0
        jle loop6
        iaddq $1,%rax          #count++
loop6:
       
        rmmovq %r13,40(%rsi)
        andq %r13,%r13         #judge whether >0
        jle loop7
        iaddq $1,%rax          #count++
loop7:  
         
        rmmovq %r14,48(%rsi)
        andq %r14,%r14        #judge whether >0
        jle loop8
        iaddq $1,%rax         #count++
loop8:
        
        rmmovq %rcx,56(%rsi)
        andq %rcx,%rcx        #judge whether >0
        jle loop9
        iaddq $1,%rax         #count++
loop9:
        
        rmmovq %rbp,64(%rsi)
        andq %rbp,%rbp        #judge whether >0
        jle loop10
        iaddq $1,%rax         #count++
loop10:
        rmmovq %rbx,72(%rsi)
        andq %rbx,%rbx        #judge whether >0
        jle check_loop
        iaddq $1,%rax         #count++
check_loop:
        iaddq $0x50,%rdi      #modify %rsi %rdi to get a new 10-items start point  0x50=80
        iaddq $0x50,%rsi
        iaddq $-10,%rdx       #len>10?if true begin a new loop ,if false jump to left items procedure
        jge loop1
root:                      #the 3-branches tree begins below:
        iaddq $7,%rdx         #len>3?
        jg right_tree         #len>3(most likely),to right tree
        jl left_tree          #len<3,to left tree
        jmp remain_3          #len==3,jmp to situation of remain 3
left_tree:
        iaddq $2,%rdx         #len>1?
        je remain_1
        iaddq $-1,%rdx        #len==2?
        je remain_2
        ret                   #len==0,return
right_tree:
        iaddq $-3,%rdx        #len>6?
        jg right_son          #len=7,8,9
        je remain_6           #len==6
        iaddq $1,%rdx         #len>5?
        je remain_5           #len==5
        jl remain_4           #len==4
right_son:
        iaddq $-2,%rdx        #len>8?
        je remain_8           #len==8
        jl remain_7           #len==7
                            #the tree ends here
remain_9:
        mrmovq 64(%rdi),%r8   #read data from about %rdi 
        rmmovq %r8,64(%rsi)   #load data to about %rsi
        andq %r8,%r8          #judge whether >0
remain_8:
        mrmovq 56(%rdi),%r8 
        jle mov_8
        iaddq $1,%rax         #if >0 ,count++
mov_8:
        rmmovq %r8,56(%rsi)
        andq %r8,%r8          #judge whether >0
remain_7:
        mrmovq 48(%rdi),%r8
        jle mov_7
        iaddq $1,%rax         #if >0 ,count++
mov_7:
        rmmovq %r8,48(%rsi)
        andq %r8,%r8          #judge whether >0
remain_6:
        mrmovq 40(%rdi),%r8
        jle mov_6
        iaddq $1,%rax         #if >0 ,count++
mov_6:
        rmmovq %r8,40(%rsi)
        andq %r8,%r8          #judge whether >0
remain_5:
        mrmovq 32(%rdi),%r8
        jle mov_5
        iaddq $1,%rax         #if >0 ,count++
mov_5:
        rmmovq %r8,32(%rsi)
        andq %r8,%r8          #judge whether >0
remain_4:
        mrmovq 24(%rdi),%r8
        jle mov_4
        iaddq $1,%rax         #if >0 ,count++
mov_4:
        rmmovq %r8,24(%rsi)
        andq %r8,%r8          #judge whether >0
remain_3:
        mrmovq 16(%rdi),%r8
        jle mov_3
        iaddq $1,%rax         #if >0 ,count++
mov_3:
        rmmovq %r8,16(%rsi)
        andq %r8,%r8          #judge whether >0
remain_2:
        mrmovq 8(%rdi),%r8
        jle mov_2
        iaddq $1,%rax         #if >0 ,count++
mov_2:
        rmmovq %r8,8(%rsi)
        andq %r8,%r8          #judge whether >0
remain_1:
        mrmovq (%rdi),%r8
        jle mov_1
        iaddq $1,%rax         #if >0 ,count++
mov_1:
        rmmovq %r8,(%rsi)
        andq %r8,%r8          #judge whether >0
        jle Done              #if <0,finish(len==0) now
        iaddq $1,%rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad -4
	.quad -5
	.quad 6
	.quad -7
	.quad -8
	.quad -9
	.quad -10
	.quad -11
	.quad 12
	.quad -13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad -18
	.quad 19
	.quad -20
	.quad 21
	.quad -22
	.quad 23
	.quad -24
	.quad -25
	.quad -26
	.quad -27
	.quad 28
	.quad 29
	.quad 30
	.quad -31
	.quad 32
	.quad 33
	.quad -34
	.quad -35
	.quad 36
	.quad 37
	.quad 38
	.quad 39
	.quad 40
	.quad 41
	.quad -42
	.quad 43
	.quad 44
	.quad 45
	.quad -46
	.quad 47
	.quad 48
	.quad -49
	.quad 50
	.quad 51
	.quad -52
	.quad 53
	.quad -54
	.quad -55
	.quad -56
	.quad -57
	.quad 58
	.quad 59
	.quad 60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
