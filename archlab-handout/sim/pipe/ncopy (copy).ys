#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#Yusen Wu 2000013137
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-10,%rdx
        jl root
loop1:  
        mrmovq (%rdi),%r8
        mrmovq 8(%rdi),%r9
        rmmovq %r8,(%rsi)
        andq %r8,%r8
        jle loop2
        iaddq $1,%rax
loop2:
        mrmovq 16(%rdi),%r8
        rmmovq %r9,8(%rsi)
        andq %r9,%r9
        jle loop3
        iaddq $1,%rax
loop3:  
        mrmovq 24(%rdi),%r9
        rmmovq %r8,16(%rsi)
        andq %r8,%r8
        jle loop4
        iaddq $1,%rax
loop4:
        mrmovq 32(%rdi),%r8
        rmmovq %r9,24(%rsi)
        andq %r9,%r9
        jle loop5
        iaddq $1,%rax
loop5:  
        mrmovq 40(%rdi),%r9
        rmmovq %r8,32(%rsi)
        andq %r8,%r8
        jle loop6
        iaddq $1,%rax
loop6:
        mrmovq 48(%rdi),%r8
        rmmovq %r9,40(%rsi)
        andq %r9,%r9
        jle loop7
        iaddq $1,%rax
loop7:  
        mrmovq 56(%rdi),%r9
        rmmovq %r8,48(%rsi)
        andq %r8,%r8
        jle loop8
        iaddq $1,%rax
loop8:
        mrmovq 64(%rdi),%r8
        rmmovq %r9,56(%rsi)
        andq %r9,%r9
        jle loop9
        iaddq $1,%rax
loop9:
        mrmovq 72(%rdi),%r9
        rmmovq %r8,64(%rsi)
        andq %r8,%r8
        jle loop10
        iaddq $1,%rax
loop10:
        rmmovq %r9,72(%rsi)
        andq %r9,%r9
        jle check_loop
        iaddq $1,%rax
check_loop:
        iaddq $0x50,%rdi
        iaddq $0x50,%rsi
        iaddq $-10,%rdx
        jge loop1
root:
        iaddq $7,%rdx
        jg right_tree
        jl left_tree
        jmp remain_3
left_tree:
        iaddq $2,%rdx
        je remain_1
        iaddq $-1,%rdx
        je remain_2
        ret
right_tree:
        iaddq $-3,%rdx
        jg right_son
        je remain_6
        iaddq $1,%rdx
        je remain_5
        jl remain_4
right_son:
        iaddq $-2,%rdx
        je remain_8
        jl remain_7
remain_9:
        mrmovq 64(%rdi),%r8
        rmmovq %r8,64(%rsi)
        andq %r8,%r8
remain_8:
        mrmovq 56(%rdi),%r8
        jle mov_8
        iaddq $1,%rax
mov_8:
        rmmovq %r8,56(%rsi)
        andq %r8,%r8
remain_7:
        mrmovq 48(%rdi),%r8
        jle mov_7
        iaddq $1,%rax
mov_7:
        rmmovq %r8,48(%rsi)
        andq %r8,%r8
remain_6:
        mrmovq 40(%rdi),%r8
        jle mov_6
        iaddq $1,%rax
mov_6:
        rmmovq %r8,40(%rsi)
        andq %r8,%r8
remain_5:
        mrmovq 32(%rdi),%r8
        jle mov_5
        iaddq $1,%rax
mov_5:
        rmmovq %r8,32(%rsi)
        andq %r8,%r8
remain_4:
        mrmovq 24(%rdi),%r8
        jle mov_4
        iaddq $1,%rax
mov_4:
        rmmovq %r8,24(%rsi)
        andq %r8,%r8
remain_3:
        mrmovq 16(%rdi),%r8
        jle mov_3
        iaddq $1,%rax
mov_3:
        rmmovq %r8,16(%rsi)
        andq %r8,%r8
remain_2:
        mrmovq 8(%rdi),%r8
        jle mov_2
        iaddq $1,%rax
mov_2:
        rmmovq %r8,8(%rsi)
        andq %r8,%r8
remain_1:
        mrmovq (%rdi),%r8
        jle mov_1
        iaddq $1,%rax
mov_1:
        rmmovq %r8,(%rsi)
        andq %r8,%r8
        jle Done
        iaddq $1,%rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
