
bubble.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <bubble_sort>:
   0:	48 8d 74 f7 f8       	lea    -0x8(%rdi,%rsi,8),%rsi
   5:	eb 22                	jmp    29 <bubble_sort+0x29>
   7:	48 83 c0 08          	add    $0x8,%rax
   b:	48 39 f0             	cmp    %rsi,%rax
   e:	73 15                	jae    25 <bubble_sort+0x25>
  10:	48 8b 50 08          	mov    0x8(%rax),%rdx
  14:	48 8b 08             	mov    (%rax),%rcx
  17:	48 39 ca             	cmp    %rcx,%rdx
  1a:	7d eb                	jge    7 <bubble_sort+0x7>
  1c:	48 89 48 08          	mov    %rcx,0x8(%rax)
  20:	48 89 10             	mov    %rdx,(%rax)
  23:	eb e2                	jmp    7 <bubble_sort+0x7>
  25:	48 83 ee 08          	sub    $0x8,%rsi
  29:	48 39 fe             	cmp    %rdi,%rsi
  2c:	76 05                	jbe    33 <bubble_sort+0x33>
  2e:	48 89 f8             	mov    %rdi,%rax
  31:	eb d8                	jmp    b <bubble_sort+0xb>
  33:	f3 c3                	repz retq 







	
bubble_sort:
.LFB2:
	.cfi_startproc
	endbr64
	leaq	-8(%rdi,%rsi,8), %rsi
	jmp	.L13
.L14:
	addq	$8, %rax
.L16:
	cmpq	%rsi, %rax
	jnb	.L18
	movq	8(%rax), %rdx
	movq	(%rax), %rcx
	cmpq	%rcx, %rdx
	jge	.L14
	movq	%rcx, 8(%rax)
	movq	%rdx, (%rax)
	jmp	.L14
.L18:
	subq	$8, %rsi
.L13:
	cmpq	%rdi, %rsi
	jbe	.L19
	movq	%rdi, %rax
	jmp	.L16
.L19:
	ret
	.cfi_endproc
.LFE2:
	.size	bubble_sort, .-bubble_sort
	.globl	main
	.type	main, @function
main:
.LFB3:
	.cfi_startproc
	endbr64
	movl	$6, %esi
	leaq	s(%rip), %rdi
	call	bubble_sort
	movl	$0, %eax
	ret
	.cfi_endproc
.LFE3:
	.size	main, .-main
	.globl	s
	.data
	.align 32
	.type	s, @object
	.size	s, 48
s:
	.quad	3018
	.quad	3258
	.quad	2763
	.quad	3243
	.quad	2748
	.quad	2988
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	 1f - 0f
	.long	 4f - 1f
	.long	 5
0:
	.string	 "GNU"
1:
	.align 8
	.long	 0xc0000002
	.long	 3f - 2f
2:
	.long	 0x3
3:
	.align 8
4:



















.align 8
Array:
.quad 0xbca
.quad 0xcba
.quad 0xacb
.quad 0xcab
.quad 0xabc
.quad 0xbac

bubble_sort:
	irmovq	$8, %r10
	rrmovq	%rsi, %r11
	addq	%r11, %r11
	addq	%r11, %r11
	addq	%r11, %r11
	subq	%r10, %r11
	pushq	%rdi
	addq	%r11, %rdi
	rrmovq	%rdi, %rsi
	popq	%rdi		    #leaq  -8(rdi,rsi,8),rsi
	jmp     L13
L14:
	addq	%r10, %rax	    #改变地址
L16:
	pushq	%rax
	subq	%rsi,%rax
	popq	%rax               #cmpq rsi,rax
	jge	L18
	mrmovq	8(%rax), %rdx	    
	mrmovq	(%rax), %rcx
	pushq	%rdx
	subq	%rcx, %rdx
	popq	%rdx    	   #cmpq   rcx，rdx
	jge	L14
	rmmovq	%rcx, 8(%rax)
	rmmovq	%rdx, (%rax)
	jmp	L14
L18:
	subq	%r10, %rsi        #改变地址
L13:
	pushq	%rsi
	subq	%rdi, %rsi
	popq	%rsi              #cmpq  rdi，rsi
	jle	L19
	rrmovq	%rdi, %rax
	jmp	L16
L19:
	ret

       
       
       
main:
       irmovq	Array, %rdi
       irmovq	$6, %rsi
       call bubble_sort:

       ret
       
.pos 0x200 
stack:

